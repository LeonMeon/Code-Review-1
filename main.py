{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Exception in Tkinter callback\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\leono\\anaconda3\\lib\\tkinter\\__init__.py\", line 1883, in __call__\n",
      "    return self.func(*args)\n",
      "  File \"<ipython-input-1-6351e2b40288>\", line 58, in cancel\n",
      "    path = os.path.join(os.path.abspath(os.path.dirname(__file__)), #конкатенацию пути path и компонентов *paths.\n",
      "NameError: name '__file__' is not defined\n"
     ]
    }
   ],
   "source": [
    "import tkinter\n",
    "import os\n",
    "from tkinter import messagebox as mb\n",
    "from tkinter import messagebox as mb\n",
    "try:\n",
    "    f = open(\"save.txt\", 'x') #open for exclusive creation, failing if the file already exists\n",
    "    hunger = 100\n",
    "    happy = 100\n",
    "    result = 0\n",
    "except FileExistsError:\n",
    "    f = open(\"save.txt\")\n",
    "    args = f.readlines()\n",
    "    hunger = int(args[0])\n",
    "    happy = int(args[1])\n",
    "    result = str(args[2])\n",
    "f.close()\n",
    "\n",
    "pressforstart = True\n",
    "feedflag = 0\n",
    "playflag = 0\n",
    "deathflag = 0\n",
    "\n",
    "class CustomDialog(object):\n",
    "    def __init__(self, parent, prompt=\"\", default=\"\"):\n",
    "        self.popup = tkinter.Toplevel(parent) # окно диалога\n",
    "        self.popup.title(prompt)\n",
    "        self.popup.transient(parent)\n",
    "        #сделать окно зависимым от другого окна, указанного в аргументе. Будет сворачиваться вместе с указанным окном.\n",
    "        #Без аргументов возвращает текущее значение.\n",
    "\n",
    "        self.var = tkinter.StringVar(value=default) # текст в окне\n",
    "\n",
    "        label = tkinter.Label(self.popup, text=prompt)\n",
    "        entry = tkinter.Entry(self.popup, textvariable=self.var) #это виджет, позволяющий пользователю ввести одну строку текста.derwidth\n",
    "        buttons = tkinter.Frame(self.popup)\n",
    "        \n",
    "        buttons.pack(side=\"bottom\", fill=\"x\") #это специальный механизм, который размещает (упаковывает) виджеты на окне\n",
    "        label.pack(side=\"top\", fill=\"x\", padx=20, pady=10)\n",
    "        entry.pack(side=\"top\", fill=\"x\", padx=20, pady=10)\n",
    "\n",
    "        ok = tkinter.Button(buttons, text=\"Ok\",\n",
    "                            command=self.popup.destroy) #Метод класса для закрытия окна индикатора\n",
    "        ok.pack(side=\"top\")\n",
    "\n",
    "        self.entry = entry\n",
    "\n",
    "    def show(self):\n",
    "        #Методы  focus_ для управления фокусом ввода с клавиатуры. Виджет, имеющий фокус, получает все события с клавиатуры.\n",
    "        self.entry.focus_force()\n",
    "        root.wait_window(self.popup) # ожидание\n",
    "        return self.var.get() # возвращает строку из StringVar\n",
    "\n",
    "\n",
    "def cancel():\n",
    "    answer = mb.askyesno(title=\"Start over\",\n",
    "                         message=\"Are you sure,that you want to start over?\")\n",
    "    if answer is True:\n",
    "        path = os.path.join(os.path.abspath(os.path.dirname(__file__)), #конкатенацию пути path и компонентов *paths.\n",
    "                            'save.txt')\n",
    "        os.remove(path)\n",
    "        exit()\n",
    "\n",
    "\n",
    "def exitgame():\n",
    "    answer = mb.askyesno(title=\"Exit\",\n",
    "                         message=\"Are you leavig me?\")\n",
    "    if answer is True:\n",
    "        root.quit()\n",
    "\n",
    "def help():\n",
    "    file = open('help.txt', encoding=\"utf8\")\n",
    "    mb.showinfo(\"Help\", file.read())\n",
    "\n",
    "def start_game(start):\n",
    "    global pressforstart\n",
    "    \n",
    "    if pressforstart is False:\n",
    "        pass\n",
    "    else:\n",
    "        startLabel.config(text=\"\")\n",
    "        update_hunger()\n",
    "        update_happy()\n",
    "        update_display()\n",
    "        pressforstart = False\n",
    "\n",
    "def update_display():\n",
    "    global hunger\n",
    "    global feedflag\n",
    "    global playflag\n",
    "\n",
    "    if deathflag == 1:\n",
    "        Picture.config(image=death)\n",
    "        Picture.after(100, update_display) #Таймер\n",
    "    elif feedflag == 1:\n",
    "        Picture.config(image=Eating)\n",
    "    elif playflag == 1:\n",
    "        Picture.config(image=playing)\n",
    "    else:\n",
    "        if hunger >= 80 and happy >= 70:\n",
    "            Picture.config(image=happyphoto)\n",
    "        elif hunger >= 50 and happy >= 50:\n",
    "            Picture.config(image=normalphoto)\n",
    "        elif hunger < 50:\n",
    "            Picture.config(image=Hungry)\n",
    "        elif happy < 50:\n",
    "            Picture.config(image=sad)\n",
    "\n",
    "    hungerLabel.config(text=\"I'm full \" + str(hunger) + \" %\")\n",
    "    happyLabel.config(text=\"Happines: \" + str(happy) + \" %\")\n",
    "\n",
    "    if feedflag == 1:\n",
    "        Picture.after(1000, update_display)\n",
    "        feedflag = 0\n",
    "    elif playflag == 1:\n",
    "        Picture.after(1000, update_display)\n",
    "        playflag = 0\n",
    "    else:\n",
    "        Picture.after(300, update_display)\n",
    "\n",
    "\n",
    "def update_hunger():\n",
    "    global hunger\n",
    "    if hunger > 0:\n",
    "        hunger -= 1\n",
    "    if is_alive():\n",
    "        hungerLabel.after(1000, update_hunger)\n",
    "\n",
    "def update_happy():\n",
    "\n",
    "    global happy\n",
    "\n",
    "    if happy > 0:\n",
    "        happy -= 1\n",
    "\n",
    "    if is_alive():\n",
    "        happyLabel.after(1000, update_happy)\n",
    "\n",
    "def feed():\n",
    "    global hunger\n",
    "    global feedflag\n",
    "\n",
    "    feedflag = 1\n",
    "\n",
    "    if is_alive():\n",
    "        global hunger\n",
    "        if hunger <= 93:\n",
    "            hunger += 7\n",
    "\n",
    "def play():\n",
    "    global happy\n",
    "    global playflag\n",
    "\n",
    "    if is_alive():\n",
    "        if happy <= 90:\n",
    "            happy += 10\n",
    "\n",
    "    playflag = 1\n",
    "\n",
    "def is_alive():\n",
    "    global hunger\n",
    "    global deathflag\n",
    "\n",
    "    if hunger <= 0:\n",
    "        deathflag = 1\n",
    "        startLabel.config(text=(str(result).title()) + \" Dead,noooo\")\n",
    "        return False\n",
    "    else:\n",
    "        return True\n",
    "\n",
    "\n",
    "root = tkinter.Tk()\n",
    "root.title(\"My petty-pretty\")\n",
    "root.geometry(\"800x800\")\n",
    "\n",
    "startLabel = tkinter.Label(root, text=\"Click enter;)\",\n",
    "                           font=('Times New Roman', 20))\n",
    "startLabel.pack()\n",
    "\n",
    "hungerLabel = tkinter.Label(root, text=\"I'm full \"\n",
    "                                       + str(hunger) + \" %\",\n",
    "                            font=('Times New Roman', 25))\n",
    "hungerLabel.pack()\n",
    "\n",
    "happyLabel = tkinter.Label(root, text=\"Happines: \"\n",
    "                                      + str(happy) + \" %\",\n",
    "                           font=('Times New Roman', 25))\n",
    "happyLabel.pack()\n",
    "\n",
    "happyphoto = tkinter.PhotoImage(file=\"Happy.png\")\n",
    "normalphoto = tkinter.PhotoImage(file=\"NORM.png\")\n",
    "sad = tkinter.PhotoImage(file=\"SAD.png\")\n",
    "Hungry = tkinter.PhotoImage(file=\"Hungry.png\")\n",
    "Eating = tkinter.PhotoImage(file=\"Eating.png\")\n",
    "playing = tkinter.PhotoImage(file=\"playing.png\")\n",
    "death = tkinter.PhotoImage(file=\"DEAD.png\")\n",
    "\n",
    "Picture = tkinter.Label(root, image=normalphoto)\n",
    "Picture.pack()\n",
    "\n",
    "btnFeed = tkinter.Button(root, text=\"Feed me!\", command=feed,\n",
    "                         font=('Times New Roman', 20))\n",
    "btnFeed.place(x=10, y=250)\n",
    "\n",
    "btnPlay = tkinter.Button(root, text=\"Play with me!\",\n",
    "                         command=play, font=('Times New Roman', 20))\n",
    "btnPlay.place(x=10, y=450)\n",
    "\n",
    "mainmenu = tkinter.Menu(root)\n",
    "root.config(menu=mainmenu)\n",
    "\n",
    "filemenu = tkinter.Menu(mainmenu, tearoff=0)\n",
    "filemenu.add_command(label=\"Cancel all and start again\",\n",
    "                     command=cancel)\n",
    "filemenu.add_command(label=\"Exit (autosave,of course)\",\n",
    "                     command=exitgame)\n",
    "\n",
    "helpmenu = tkinter.Menu(mainmenu, tearoff=0)\n",
    "helpmenu.add_command(label=\"Help\", command=help)\n",
    "#добавляет элемент меню, который в свою очередь может представлять подменю\n",
    "mainmenu.add_cascade(label=\"Menu\", menu=filemenu)\n",
    "mainmenu.add_cascade(label=\" Inquiries\", menu=helpmenu)\n",
    "\n",
    "if result == 0:\n",
    "    dialog = CustomDialog(root, prompt=\"What's my name?\")\n",
    "    result = dialog.show()\n",
    "\n",
    "\n",
    "nameLabel = tkinter.Label(root, text=\"My name is \" + str(result),\n",
    "                          font=('Times New Roman', 25))\n",
    "nameLabel.pack()\n",
    "\n",
    "root.bind('<Return>', start_game)\n",
    "root.mainloop()\n",
    "\n",
    "f = open(\"save.txt\", 'w')\n",
    "args = [hunger, happy, result]\n",
    "f.writelines(\"%s\\n\" % i for i in args)\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "args"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
